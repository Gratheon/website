Heading,Priority,Group,Details
Description,1 MUST,Overview,"Problem statement and purpose of the service. Screenshot of the UI, if applicable"
Installation,3 COULD,Overview,"How to run locally (installing dependencies, docker, shell scripts, https://github.com/pipedrive/cms#installation-flow)"
Usage,2 SHOULD,Overview,"• Where its in UI
• URL, feature flags, user settings, payment tier"
Stakeholders,3 COULD,Overview,"Who uses this service directly, who is affected (tribes, clients, third-party developers..), who is the owner"
Roadmap,3 COULD,Overview,"What is the future of this service. How it evolve (roadmap link), will it merge or be deprecated"
TEX video,4 WISH,Overview,Explain how service works
Product requirements,1 MUST,Functionality,"How does service affect product experience? "
Use cases / FAQ,2 SHOULD,Functionality,"Stakeholders, actions, multiplicity.Example - describe typical scenarios that developers follow (adding some new code, extending a service etc)"
Business rules / State diagram,3 COULD,Functionality,• use https://mermaid-js.github.io/mermaid/#/stateDiagramThese are typically complex if-else scenarios important to how product behaves
Page navigation,3 COULD,Functionality,Useful to show how user can navigate across UI
Entities & relationships,3 COULD,Architecture,"Concepts and terminology, their one-to-many relationships. This can be seen as more general version of DB schema diagram, but can include entities that are not only in DB, but also in external services, filesystem, caches etc."
Contribution,2 SHOULD,Processes,"• What needs to be done before PR (linters, codestyle, version bumping, changelog, https://github.com/pipedrive/popeye#drafting-a-release for a library)
• How should pull-request review happen (slack notifications)
• Who can deploy at what time (if applicable like in barista case)"
Development,3 COULD,Processes,"• How to build (global tools if needed)
• How to run in hot reload mode
• How to debug in IDE / docker, profile, benchmark
• How initial DB is set up. Where are migrations & fixtures"
Testing & Quality,3 COULD,Processes,"• How to run unit tests (how to make snapshots)
• How to run functional tests (how they work)
• Badges (sonar, codeship, snyk)"
Deployment / Publishing,3 COULD,Processes,"• Deployment links (jenkins)
• Monitoring links
    ◦ Grafana dashboard
    ◦ Graylog
• Prometheus endpoints for monitoring? What metrics are important/tracked?
• Deployment diagram. Useful in case of complex server type or non-standard region setup (backoffice, marketplace)
• Multi-DC diagram / region specific logic"
Configuration,2 SHOULD,Architecture,"• Do you use custom ENV variables that affect service? What are the default values?
• Where its stored (consul, db, package.json)
• What fields affect what, important TTLs"
DB schema,1 MUST,Architecture,"• Use https://mermaid-js.github.io/mermaid/#/entityRelationshipDiagram, See https://github.com/pipedrive/graphql-schema-registry#db-structure
• Link to schemas / diagram (if service has any DB at all).Lucidchart can automatically generate it based on DQL dump"
Events,2 SHOULD,Architecture,"Generated for external MQ, tracking or analytics engines
• See https://github.com/pipedrive/identity#kafka-events as README example
• Fastify event schema (typescript)
• Links/accounts for sesheta, google analytics, https://github.com/pipedrive/webapp#new-relic-tracked-actions, fullstory
• Schema, fields, type. Link to tests"
Tech stack,3 COULD,Architecture,"List if stack is non-standard. Include versions
• Language & extensions
• Framework
• Third-party product (cms, forum etc.)"
Dependencies,1 MUST,Architecture,"• Use https://mermaid-js.github.io/mermaid/#/flowchart flow chart
    ◦ you can include html links in service names to reference other repos - see https://github.com/pipedrive/barista#component-diagram
Can include
• services
    ◦ external SaaS services & APIs
    ◦ CDNs
• database servers
• message queues
• background (cron) jobs should include start time, frequency and name
Should include what service depends on (as network requests) - other- Use https://rpm.newrelic.com/accounts/947939/service_maps to track calls in realtime- Service-manager for service discovery info"
Libraries,3 COULD,Architecture,"Mention third-party dependencies if they are not standard for your stack (package.json, composer.json, Gopkg.toml)
Make sure that license https://github.com/pipedrive/webapp#licenses"
API,2 SHOULD,Architecture,"(Ordered from easiest to hardest)
• Plain list of endpoints & methods that are used
    ◦ you can use collapsible blocks
• Draw a diagram (lucidchart)Useful if service has 3+ endpoints, has non-restful interface.Can highlight what endpoint calls what sub-service / db
• export postman collections
• Include input payload & response examples (if swagger is not used)
• Compose swagger.json manually
• Compose swagger.json on the fly based on code annotations
• Serve swagger.json via API based on live code & schemas
• Exposed public function reference (for libraries)"
Class diagram,3 COULD,Architecture,"• Use https://mermaid-js.github.io/mermaid/#/classDiagram
• Useful to show deeper waterfall or inheritance structure or highlight specific functionality
• Sub-systems. How important custom code works (Caching, DB query builder, Localisation, Event processing, Logging, Email generation & delivery, Search, File handling, Encryption).Typically these are candidates for extraction to a separate library or a service"
Sequence diagrams,3 COULD,Architecture,"Data flow diagram with time directed from top to bottom.Use https://mermaid-js.github.io/mermaid/#/sequenceDiagram.Useful logic is complex with multiple involved services, to show response/error code importance"