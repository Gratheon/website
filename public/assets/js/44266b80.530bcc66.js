"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6983],{51050:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=s(74848),t=s(28453);const o={},r=void 0,a={id:"\ud83d\udcf1 Web-app/Tech stack, conventions, environments",title:"Tech stack, conventions, environments",description:"Languages",source:"@site/docs/\ud83d\udcf1 Web-app/Tech stack, conventions, environments.md",sourceDirName:"\ud83d\udcf1 Web-app",slug:"/\ud83d\udcf1 Web-app/Tech stack, conventions, environments",permalink:"/docs/\ud83d\udcf1 Web-app/Tech stack, conventions, environments",draft:!1,unlisted:!1,editUrl:"https://github.com/gratheon/website/tree/main/packages/create-docusaurus/templates/shared/docs/\ud83d\udcf1 Web-app/Tech stack, conventions, environments.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcf1 Web-app",permalink:"/docs/\ud83d\udcf1 Web-app/"},next:{title:"UX - UI wireframes",permalink:"/docs/\ud83d\udcf1 Web-app/UX - UI wireframes"}},c={},l=[{value:"Languages",id:"languages",level:2},{value:"Storage",id:"storage",level:2},{value:"(Cloud) API limitations",id:"cloud-api-limitations",level:2},{value:"Frontend",id:"frontend",level:2},{value:"Edge Devices OS",id:"edge-devices-os",level:2},{value:"Edge devices API",id:"edge-devices-api",level:2}];function d(e){const n={a:"a",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"languages",children:"Languages"}),"\n",(0,i.jsx)(n.p,{children:"To have consistent experience across code repos and due to limitations of teams, we want to limit possible tech stack (at least for now) to these languages:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Javascript (Typescript)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"React / TSX for frontend"}),"\n",(0,i.jsx)(n.li,{children:"NodeJS (for low-load BE services)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Go (for high-load BE services)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"C/C++ - for embedded devices"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Python","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"for ML and data-science models. Ex. using"}),"\n",(0,i.jsx)(n.li,{children:"for early prototypes of a service where ease/speed of integration is important, can be copy-pasted. Ex. video-processing with opencv"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"storage",children:"Storage"}),"\n",(0,i.jsx)(n.p,{children:"For Databases and persistance we use"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"MySQL \u2190 maybe we could switch to Postgres in the future, but atm lets stick to this"}),"\n",(0,i.jsx)(n.li,{children:"Redis \u2190 for caching & pub-sub"}),"\n",(0,i.jsx)(n.li,{children:"SQLLite \u2190 for edge devices if something needs to be stored for a longer time, but no willingness to mess with a dedicated service"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"cloud-api-limitations",children:"(Cloud) API limitations"}),"\n",(0,i.jsxs)(n.p,{children:["For public API we rely on ",(0,i.jsx)(n.a,{href:"https://www.apollographql.com/docs/federation/",children:"graphql federation"}),", so if you create a microservice, make sure that language and framework supports that."]}),"\n",(0,i.jsx)(n.p,{children:"GraphQL federation allows us to declare schema in a strictly typed format, while keeping services independent."}),"\n",(0,i.jsx)(n.p,{children:"If you\u2019re worried about standardization of GraphQL schema variations, like pagination standard or global ID pattern then use simple pagination first, complicate it later. For UUID"}),"\n",(0,i.jsx)(n.h2,{id:"frontend",children:"Frontend"}),"\n",(0,i.jsx)(n.p,{children:"We use urql because"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"we do not use apollo-client because its heavy in filesize"}),"\n",(0,i.jsx)(n.li,{children:"we do not use Relay because its very opinionated on types, makes queries too dynamic with its fragments"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"edge-devices-os",children:"Edge Devices OS"}),"\n",(0,i.jsxs)(n.p,{children:["But, you should not care about it that much, because you should write service as a ",(0,i.jsx)(n.strong,{children:"docker container"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ubuntu 18 for ",(0,i.jsx)(n.a,{href:"https://www.notion.so/Jetson-Nano-6500eadfbab64e7b8bd0d0896df30701?pvs=21",children:"Jetson Nano"})," with NVidia GPU"]}),"\n",(0,i.jsxs)(n.li,{children:["Ubuntu 20 for ",(0,i.jsx)(n.a,{href:"https://www.notion.so/Jetson-Orin-Nano-0432edfb44f748a6874c41ddefa7f69c?pvs=21",children:"Jetson Orin Nano"})," with NVidia GPU"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"edge-devices-api",children:"Edge devices API"}),"\n",(0,i.jsx)(n.p,{children:"Its not yet fully clear yet."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.strong,{children:"Protobuf &"})," ",(0,i.jsx)(n.strong,{children:"GRPC"}),". Mostly because you\u2019re not dealing with serving external customers and efficiency is the most important issue"]}),"\n",(0,i.jsx)(n.li,{children:"Use REST API / graphql if service is a hybrid. For example if its a model that runs both on the edge and in the cloud."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(96540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);