"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[64382],{9664:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"API/Share Token Authentication","title":"Share Token Authentication","description":"For publicly shared resources like inspection views, a special Share Token is used. This token provides limited, read-only access based on predefined scopes.","source":"@site/docs/API/Share Token Authentication.md","sourceDirName":"API","slug":"/API/Share Token Authentication","permalink":"/docs/API/Share Token Authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/gratheon/website/tree/main/packages/create-docusaurus/templates/shared/docs/API/Share Token Authentication.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Authentication","permalink":"/docs/API/Authentication"},"next":{"title":"\ud83d\udcf1 Web-app","permalink":"/docs/\ud83d\udcf1 Web-app/"}}');var s=r(74848),i=r(28453);const o={},c=void 0,a={},d=[];function l(e){const n={code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["For publicly shared resources like inspection views, a special ",(0,s.jsx)(n.strong,{children:"Share Token"})," is used. This token provides limited, read-only access based on predefined scopes."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Header:"})," When making requests using a share token, include it in the ",(0,s.jsx)(n.code,{children:"X-Share-Token"})," HTTP header:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"X-Share-Token: <your_share_token>\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scopes:"})," Each share token has embedded scopes defining exactly which queries are allowed and for which specific resource IDs. For example, a token for sharing inspection ",(0,s.jsx)(n.code,{children:"123"})," of hive ",(0,s.jsx)(n.code,{children:"456"})," might have scopes like:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "version": 1,\n  "allowedQueries": [\n    {\n      "queryName": "inspection",\n      "requiredArgs": { "id": "123" }\n    },\n    {\n      "queryName": "hive",\n      "requiredArgs": { "id": "456" }\n    }\n    // Potentially other related read-only queries like apiary, frames, etc.\n  ]\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation & Enforcement:"})," The ",(0,s.jsx)(n.code,{children:"graphql-router"})," validates the ",(0,s.jsx)(n.code,{children:"X-Share-Token"})," by calling the ",(0,s.jsx)(n.code,{children:"validateShareToken"})," query on the ",(0,s.jsx)(n.code,{children:"user-cycle"})," service. If the token is valid, the router ",(0,s.jsx)(n.strong,{children:"enforces"})," the embedded scopes by parsing the incoming GraphQL request. It checks if the requested operation (query) and its arguments match an entry in the token's ",(0,s.jsx)(n.code,{children:"allowedQueries"}),". Requests attempting operations or arguments outside the defined scopes, or any mutations, will be denied directly by the router with a ",(0,s.jsx)(n.code,{children:"403 Forbidden"})," error before reaching downstream services."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(96540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);